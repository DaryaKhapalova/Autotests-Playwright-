from playwright.sync_api import Page
from playwright.async_api import async_playwright
from pathlib import Path
from urllib.parse import urlparse, parse_qs
import pandas as pd
import os
import requests
import pytest
import asyncio
import config
import re
import websockets
import json
import time

order_number = None

class  catalogPage:
    def __init__(self,page:Page):
        self.page = page
        self.elements = {
        'searchInput':page.locator("input#search-hints-input"),    
        'catalogButton':page.locator("button[id='catalog']"),
        'catalogHeader':page.locator("h3[class='catalog__header--1xTo2']"),
        'catalogCategories':page.locator("div[class='catalog__categories-list--T9sgj']"),
        'emptyOrderContainer':page.locator("div[class='card--kpSsy footnote--s+GqX empty-order__footnote--YWDvf table-container__header__order--3Y7rq']"),
        'selectOrder':page.locator("div[class='card--kpSsy footnote--s+GqX order-header--v5Zo0 table-container__header__order--3Y7rq']"),
        'createOrder':page.locator("button[class='button--AE6Di order-header__submit--z2zcI button--secondary--Oi+OC']")
        }

    def navigate(self):
        self.page.goto(f'{config.BASE_URL}orders/new', wait_until="load")
        self.page.wait_for_load_state("load")

    def select_category(self,page):
        firstLevel = page.locator("span.catalog__category-name--Kev56>> text='–ù–æ—É—Ç–±—É–∫–∏ –∏ –ø–ª–∞–Ω—à–µ—Ç—ã'")
        secondLevel = page.locator("h4.catalog__sub-category-name--tCzV2 >> text='–ù–æ—É—Ç–±—É–∫–∏'") 
        element = page.locator('button[class*="good-list-item__expand-btn--K+Wm1"][class*="button--AE6D"][class*="button--ternary--gG23p"]').first
        firstLevel.click() 
        secondLevel.wait_for(state="visible", timeout=6000)
        secondLevel.click()
        element.wait_for(state="visible", timeout=9000)    


    def check_view(self,page):  
        shortView = page.locator("button[data-testid='icon-button']:has(svg.svg-icon-view-detail)")
        fullView = page.locator("button[data-testid='icon-button']:has(svg.svg-icon-view)")
        short_fill = shortView.locator("rect").first.get_attribute("fill")
        full_fill = fullView.locator("rect").first.get_attribute("fill") 
        if full_fill == "#236192":
            print("–í–∏–¥ –ø–æ–¥—Ä–æ–±–Ω—ã–π —É–∂–µ –≤–∫–ª—é—á—ë–Ω.")
        elif short_fill == "#236192":
            print("–°–µ–π—á–∞—Å –≤–∫–ª—é—á–µ–Ω –∫—Ä–∞—Ç–∫–∏–π –≤–∏–¥ . –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∏–¥ 1...")
            fullView.click()
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–∏–¥. –≠–ª–µ–º–µ–Ω—Ç—ã –∏–∫–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.") 

    def check_checkboxes_active(self,page):
        setupButton = page.get_by_role("row", name="–§–∏–ª—å—Ç—Ä") \
             .locator("button[data-testid='button']:has(svg.svg-icon-settings)")
        self.checkbox_ids = {
            "–î–æ—Å—Ç—É–ø–Ω–æ ": "available1_NEW",
            "–ù–∞ —Å–∫–ª–∞–¥–µ ": "inventory1_NEW",
            "–ù–∞ –°–ö–õ–ê–î–ï 1": "warehouse1",
            "–î–æ—Å—Ç—É–ø–Ω–æ  –°–ö–õ–ê–î 1": "available1",
            }
        setupButton.wait_for(state="visible")
        setupButton.click() 
        for name, checkbox_id in self.checkbox_ids.items():
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫–±–æ–∫—Å '{name}' (id={checkbox_id})")
            input_locator = self.page.locator(f"input#{checkbox_id}")
            label_locator = self.page.locator(f"label:has(input#{checkbox_id})")
            assert input_locator.count() == 1, f"‚ùå –ß–µ–∫–±–æ–∫—Å '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
            is_checked = input_locator.is_checked()
            print(f"   ‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {'–æ—Ç–º–µ—á–µ–Ω' if is_checked else '–Ω–µ –æ—Ç–º–µ—á–µ–Ω'}")
            label_locator.click()
            is_after_click = input_locator.is_checked()
            assert is_after_click != is_checked, f"‚ùå –ß–µ–∫–±–æ–∫—Å '{name}' –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ"
            print(f"   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞")
            label_locator.click()
            is_restored = input_locator.is_checked()
            assert is_restored == is_checked, f"‚ùå –ß–µ–∫–±–æ–∫—Å '{name}' –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
            print(f"   üîÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n")

    def check_checkboxes_disabled(self,page):
        self.disabled_checkbox = {
            "–î–æ—Å—Ç—É–ø–Ω–æ —Å–∫–ª–∞–¥ 2": "available2"
        }
        for name, checkbox_id in self.disabled_checkbox.items():
            print(f"üö´ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∏–∑–µ–π–±–ª–µ–Ω–Ω—ã–π —á–µ–∫–±–æ–∫—Å: {name} (id={checkbox_id})")
            span_locator = self.page.locator(f"label:has(input#{checkbox_id}) span[class*='checkbox--Llduo']")
            input_locator = self.page.locator(f"input#{checkbox_id}")
            assert span_locator.count() == 1, f"‚ùå –ß–µ–∫–±–æ–∫—Å '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
            class_name = span_locator.get_attribute("class") or ""
            assert "checkbox--disabled" in class_name, f"‚ùå –ß–µ–∫–±–æ–∫—Å '{name}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å disabled, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –∫–ª–∞—Å—Å–∞ `checkbox--disabled`"
            print(f"   ‚úÖ –ß–µ–∫–±–æ–∫—Å –∑–∞–¥–∏–∑–µ–π–±–ª–µ–Ω (class='{class_name}')")
            label_locator = self.page.locator(f"label:has(input#{checkbox_id})")
            before_state = input_locator.is_checked()
            label_locator.click(force=True)  # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–∫
            after_state = input_locator.is_checked()
            assert before_state == after_state, f"‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ '{name}' –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Ö–æ—Ç—è –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
            print(f"   üîí –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ ‚Äî –∫–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å\n")

        
    def select_checkboxes(self,page):
        saveButton = page.locator("button.button--AE6Di.button--primary--l8973")
        self.checkbox_ids = {
            "–î–æ—Å—Ç—É–ø–Ω–æ": "available1_NEW",
            "–ù–∞ —Å–∫–ª–∞–¥–µ": "inventory1_NEW",
            "–ù–∞ –°–ö–õ–ê–î–ï 1": "warehouse1",
            "–î–æ—Å—Ç—É–ø–Ω–æ –°–ö–õ–ê–î 1": "available1",
            }
        for name, checkbox_id in self.checkbox_ids.items():
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–±–æ–∫—Å–∞: {name} (id={checkbox_id})")
            input_locator = self.page.locator(f"input#{checkbox_id}")
            label_locator = self.page.locator(f"label:has(input#{checkbox_id})")
            assert input_locator.count() == 1, f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —á–µ–∫–±–æ–∫—Å —Å id={checkbox_id}"
            if input_locator.is_checked():
                print(f"   ‚úÖ –£–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º")
            else:
                print(f"   ‚ö†Ô∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî —Å—Ç–∞–≤–∏–º")
                label_locator.click()
                assert input_locator.is_checked(), f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ–∫–±–æ–∫—Å '{name}'"
                print(f"   ‚òëÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")    
        saveButton.click() 

   
    def check_columns(self,page):
        self.column_headers = {
            "–î–æ—Å—Ç—É–ø–Ω–æ ": "available1_NEW",
            "–ù–∞ —Å–∫–ª–∞–¥–µ ": "inventory1_NEW",
            "–ù–∞ –°–ö–õ–ê–î–ï 1": "warehouse1",
            "–î–æ—Å—Ç—É–ø–Ω–æ –°–ö–õ–ê–î 1": "available1",
        }
        self.column_cells = {
        "–î–æ—Å—Ç—É–ø–Ω–æ ": "available1_NEW",
        "–ù–∞ —Å–∫–ª–∞–¥–µ ": "inventory1_NEW",
        "–ù–∞  –°–ö–õ–ê–î–ï 1": "warehouse1",
        "–î–æ—Å—Ç—É–ø–Ω–æ –°–ö–õ–ê–î 1": "available1",
        }
        for column_name, header_text in self.column_headers.items():
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±–µ—Ü: {column_name}")
            header = self.page.locator(f"[data-for='{self.column_headers[column_name]}']")
            assert header.count() > 0, f"‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ–ª–±—Ü–∞ '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"

            column_id = self.column_cells[column_name]
            cells = self.page.locator(f"[data-id='{column_id}']")
            assert cells.count() > 0, f"‚ùå –Ø—á–µ–π–∫–∏ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            for i in range(cells.count()):
                value = cells.nth(i).inner_text().strip()
                assert value != "", f"‚ùå –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –≤ '{column_name}' –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}"
                print(f"   ‚úÖ –Ø—á–µ–π–∫–∞ {i}: '{value}'")
            print(f"‚úÖ –°—Ç–æ–ª–±–µ—Ü '{column_name}' –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É\n")    
     

    def check_elements(self,page):
        for name, locator in self.elements.items():
            try:
                locator.wait_for(state="visible", timeout=5000)
                locator.scroll_into_view_if_needed()
            except Exception as e:
                print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç {name} –ù–ï –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è! –õ–æ–≥: {e}")
                raise 

    def element_contains(self, page, item_from_db):
        item_ID = item_from_db
        element = page.locator(f"div.item-column--2ggGc.item-column--compact--1X9bc[data-key='{item_from_db}']").nth(2)
        element.wait_for(state="visible", timeout=5000)
        element_text = element.text_content().strip()
        print(f"–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞: '{element_text}'")
         
        match = re.match(r'^\d+', element_text)
        if match:
            first_line = match.group(0)  
        else:
            first_line = ""
        assert item_from_db == first_line

    def create_order_header(self, page):
        notifier = page.locator("span[class='notifier-toast__text--WLxds notifier-toast__text--done--QcyyF']")
        self.elements['createOrder'].click()
        
        
        notifier.wait_for(state="visible")
        print(f"DEBUG: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: '{notifier.inner_text().strip()}'")
 

    def add_item_in_order(self,page):   
        catalogButton = page.locator("button#catalog.icon-button--m1T3S") 
        firstLevel = page.locator("span.catalog__category-name--Kev56>> text='–ù–æ—É—Ç–±—É–∫–∏ –∏ –ø–ª–∞–Ω—à–µ—Ç—ã'")
        secondLevel = page.locator("h4.catalog__sub-category-name--tCzV2 >> text='–ù–æ—É—Ç–±—É–∫–∏'") 
        element = page.locator('button[class*="good-list-item__expand-btn--K+Wm1"][class*="button--AE6D"][class*="button--ternary--gG23p"]').first
        quantity = page.locator("input.text-input--Zl6hU.smart-input__input--tjskp.smart-input__input--count--6TAV1").first
        addInOrder = page.locator("button[class='button--AE6Di order-header__submit--z2zcI button--secondary--Oi+OC']").first
        catalogButton.click()
        firstLevel.wait_for(state="visible", timeout=6000)
        firstLevel.click() 
        secondLevel.wait_for(state="visible", timeout=6000)
        secondLevel.click()
        element.wait_for(state="visible", timeout=8000)
        time.sleep(15)
        quantity.fill('1')
        box = addInOrder.bounding_box()
        page.mouse.move(box["x"] + box["width"]/2, box["y"] + box["height"]/2)
        page.mouse.down()
        page.mouse.up()
        addInOrder.evaluate("element => element.click()")
        time.sleep(15)

      

    def redirect_to_order_view(self,page):
        elseButton = page.locator("button.icon-button--m1T3S >> text='–ï—â–µ'") 
        orderActions = page.locator("div[class='popover__content--cd-EP actions__popover-content--ExF2I order-list-popover__list--k3EiF undefined']")   
        editButton = page.get_by_role("link", name="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        elseButton.wait_for(state="visible", timeout=6000)
        elseButton.click()
        orderActions.wait_for(state="visible", timeout=6000)
        editButton.click()
        time.sleep(10)
        

    def download_order(self, page,download_path): 
       order_number = main
       elseButton = page.locator("button.icon-button--m1T3S >> text='–ï—â–µ'")
       orderActions = page.locator("div[class='popover__content--cd-EP actions__popover-content--ExF2I order-list-popover__list--k3EiF undefined']") 
       downloadExcel = page.get_by_role("link", name="–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ Excel")
       elseButton.wait_for(state="visible", timeout=6000)
       elseButton.click()
       orderActions.wait_for(state="visible", timeout=6000)
       downloadExcel.click()
       time.sleep(10)
       downloaded_file = download_path / f"–ó–∞–∫–∞–∑_{order_number}.xlsx"

    def search_group(self, page):
        input = self.elements['searchInput']
        input.fill('ekey')  
        page.keyboard.press("Enter")
        page.wait_for_timeout(3000)
        expected_url = f'{config.BASE_URL}orders/new'
        page.wait_for_load_state("networkidle")  
        assert page.url == expected_url 

       
async def main():
    global order_number
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        context = await browser.new_context()
        page = await context.new_page()

        # –û–∂–∏–¥–∞–µ–º WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            ws = await page.expect_websocket(
                "wss://example.services.example.local:8443/centrifugo/connection/websocket",
                timeout=60000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫
            )

            print(f"WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: {ws.url}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —ç—Ç–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç
            await ws.send_json({"type": "subscribe", "channel": "orders"})

            # –ñ–¥–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            async for message in ws:
                print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
                try:
                    response_json = message.json()
                    order = response_json["result"]["data"]["data"]["payload"]["order"]["orderNo"]
                    print(f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order}")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç–ª–µ–º–µ–Ω—Ç–µ `notifier`
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ `notifier` –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
                    notifier_text = await page.locator('notifier').inner_text()
                    print(f"–¢–µ–∫—Å—Ç –∏–∑ notifier: {notifier_text.strip()}")

                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä–æ–∫–æ–π
                    expected_text = f'–ó–∞–∫–∞–∑ {order} —Å–æ—Ö—Ä–∞–Ω—ë–Ω'
                    if notifier_text.strip() == expected_text:
                        print("–¢–µ–∫—Å—Ç –≤ notifier —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º.")
                    else:
                        print("–¢–µ–∫—Å—Ç –≤ notifier –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º.")

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ WebSocket: {e}")

        await browser.close()

 
    return order_number
  
@pytest.fixture
async def get_order_number():
    # –ó–∞–ø—É—Å–∫ WebSocket –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
       order_number = await main()
       return order_number

    